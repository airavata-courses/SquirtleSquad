# Set enableTracing to false to disable request tracing.
enableTracing: true

# Set accessLogFile to empty string to disable access log.
accessLogFile: "/dev/stdout"

accessLogFormat: ""

accessLogEncoding: 'TEXT'

enableEnvoyAccessLogService: false
# reportBatchMaxEntries is the number of requests that are batched before telemetry data is sent to the mixer server
reportBatchMaxEntries: 100
# reportBatchMaxTime is the max waiting time before the telemetry data of a request is sent to the mixer server
reportBatchMaxTime: 1s
disableMixerHttpReports: true

# Set the following variable to true to disable policy checks by the Mixer.
# Note that metrics will still be reported to the Mixer.
disablePolicyChecks: true

# Automatic protocol detection uses a set of heuristics to
# determine whether the connection is using TLS or not (on the
# server side), as well as the application protocol being used
# (e.g., http vs tcp). These heuristics rely on the client sending
# the first bits of data. For server first protocols like MySQL,
# MongoDB, etc., Envoy will timeout on the protocol detection after
# the specified period, defaulting to non mTLS plain TCP
# traffic. Set this field to tweak the period that Envoy will wait
# for the client to send the first bits of data. (MUST BE >=1ms)
protocolDetectionTimeout: 100ms

# This is the k8s ingress service name, update if you used a different name
ingressService: "istio-ingressgateway"
ingressControllerMode: "STRICT"
ingressClass: "istio"

# The trust domain corresponds to the trust root of a system.
# Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
trustDomain: "cluster.local"

#  The trust domain aliases represent the aliases of trust_domain.
#  For example, if we have
#  trustDomain: td1
#  trustDomainAliases: [“td2”, "td3"]
#  Any service with the identity "td1/ns/foo/sa/a-service-account", "td2/ns/foo/sa/a-service-account",
#  or "td3/ns/foo/sa/a-service-account" will be treated the same in the Istio mesh.
trustDomainAliases:

# Used by pilot-agent
sdsUdsPath: "unix:/etc/istio/proxy/SDS"

# If true, automatically configure client side mTLS settings to match the corresponding service's
# server side mTLS authentication policy, when destination rule for that service does not specify
# TLS settings.
enableAutoMtls: true

outboundTrafficPolicy:
  mode: ALLOW_ANY
localityLbSetting:
  enabled: true

# Configures DNS certificates provisioned through Chiron linked into Pilot.
# The DNS certificate provisioning is enabled by default now so it get tested.
# TODO (lei-tang): we'll decide whether enable it by default or not before Istio 1.4 Release.
certificates:
  []

defaultConfig:
  #
  # TCP connection timeout between Envoy & the application, and between Envoys.
  connectTimeout: 10s
  #
  ### ADVANCED SETTINGS #############
  # Where should envoy's configuration be stored in the istio-proxy container
  configPath: "/etc/istio/proxy"
  # The pseudo service name used for Envoy.
  serviceCluster: istio-proxy
  # These settings that determine how long an old Envoy
  # process should be kept alive after an occasional reload.
  drainDuration: 45s
  parentShutdownDuration: 1m0s
  #
  # Port where Envoy listens (on local host) for admin commands
  # You can exec into the istio-proxy container in a pod and
  # curl the admin port (curl http://localhost:15000/) to obtain
  # diagnostic information from Envoy. See
  # https://lyft.github.io/envoy/docs/operations/admin.html
  # for more details
  proxyAdminPort: 15000
  #
  # Set concurrency to a specific number to control the number of Proxy worker threads.
  # If set to 0 (default), then start worker thread for each CPU thread/core.
  concurrency: 2
  #
  tracing:
    zipkin:
      # Address of the Zipkin collector
      address: zipkin.istio-system:9411
  # If port is 15012, will use SDS.
  # controlPlaneAuthPolicy is for mounted secrets, will wait for the files.
  controlPlaneAuthPolicy: NONE
  discoveryAddress: istiod.istio-system.svc:15012