version: "2"
services:

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    hostname: zookeeper
    networks: 
      - ads_network

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    networks: 
      - ads_network
    environment:
      WAIT_HOSTS: zookeper:2181
      KAFKA_CREATE_TOPICS: "addAction:1:1,apigateway:1:1,DataRetrieval:1:1,postanalysis:1:1, modelexecution:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  apigateway:
    build: "./APIGateway"
    ports: 
      - "8080:8080"
    networks: 
      - ads_network
    environment:
      WAIT_HOSTS: kafka:9092, usermanagement:8081, sessionamangement:8082 
    depends_on: 
      - zookeeper
      - kafka
      - usermanagement
      - sessionmanagement
      - modelexecution
      - inference
    restart: on-failure

  usermanagement:
    build: "./UserManagement"
    ports:
      - "8081:8081"
    networks: 
      - ads_network
    environment:
      WAIT_HOSTS: kafka:9092
    depends_on:
      - zookeeper
      - kafka
    restart: always

  sessionmanagement:
    build: "./SessionManagement"
    ports:
      - "8082:8082"
    networks: 
      - ads_network
    environment:
      WAIT_HOSTS: kafka:9092, usermanagement:8081
    depends_on:
      - zookeeper
      - kafka
      - usermanagement
    restart: always

  modelexecution:
    build: "./ModelExecution"
    networks:
      - ads_network
    environment:
      WAIT_HOSTS: kafka:9092
    depends_on:
      - zookeeper
      - kafka
    restart: on-failure

  inference:
    build: "./Inference"
    networks:
      - ads_network
    environment:
      WAIT_HOSTS: kafka:9092
    depends_on:
      - zookeeper
      - kafka
    restart: on-failure

networks: 
  ads_network:
